{"version":3,"sources":["components/VideoPlayer/index.jsx","data/index.js","components/StripeButton/index.jsx","utils/StripeJs/index.js","components/StripePay/index.jsx","pages/DonationPage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Index","srcUrl","useEffect","Plyr","className","id","playsInline","controls","autoPlay","src","type","stripeMeta","strpId","btnId","btnCategory","btnText","priceId","stripeData","data-qa","runStripe","stripeId","divId","a","Stripe","stripe","document","getElementById","addEventListener","redirectToCheckout","lineItems","price","quantity","mode","successUrl","window","location","protocol","cancelUrl","then","result","error","textContent","message","map","strp","StripeJs","stripeDiv","x","StripeButton","Container","styled","div","Rect","Rect1","RectRow","VideoPlayer","StripePay","Component","App","DonationPage","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"uRAyBeA,EAtBD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIb,OAHAC,qBAAU,WACN,IAAIC,IAAK,aAGT,yBAAKC,UAAU,SACf,2BACIC,GAAG,QACHC,aAAW,EACXC,UAAQ,EACRH,UAAU,sCACVI,UAAQ,GAER,4BACEC,IAAKR,EACLS,KAAK,iBClBbC,EAAa,SAACC,EAAQC,EAAOC,EAAaC,EAASC,GAAtC,MAAmD,CACpEJ,SACAC,QACAC,cACAC,UACAC,YAMWC,EAAa,CACxBN,EACE,6CACA,qCACF,IAAK,kCACL,sBAEAA,EACE,6CACA,qCACA,IAAK,iBACL,sBAEFA,EACE,6CACA,qCACA,IAAK,uBACL,sBAEFA,EACE,6CACA,qCACA,IAAK,uBACL,sBAEFA,EACE,6CACA,qCACA,IAAK,wBACL,sBAEFA,EACE,6CACA,yCACA,IAAK,eACL,OC/BWX,EAbD,SAAC,GAAqC,IAAnCa,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACnC,OACE,4BACEG,UAAQ,gBACRd,UAAU,mCACVC,GAAIQ,GAEJ,0BAAMT,UAAU,gCAAgCU,GAChD,0BAAMV,UAAU,iCAAiCW,K,gCCWxCI,EAnBA,uCAAG,WAAOC,EAAUC,EAAOL,GAAxB,eAAAM,EAAA,sEACKC,YAAOH,GADZ,OACVI,EADU,OAEOC,SAASC,eAAeL,GAChCM,iBAAiB,SAAS,WACvCH,EACGI,mBAAmB,CAClBC,UAAW,CAAC,CAAEC,MAAOd,EAASe,SAAU,IACxCC,KAAM,UACNC,WAAW,GAAD,OAAKC,OAAOC,SAASC,SAArB,0BACVC,UAAU,GAAD,OAAKH,OAAOC,SAASC,SAArB,6BAEVE,MAAK,SAACC,GACDA,EAAOC,QACYf,SAASC,eAAe,iBAChCe,YAAcF,EAAOC,MAAME,eAdhC,2CAAH,0DC6BA1C,EA1BD,WACZE,qBAAU,WACRe,EAAW0B,KAAI,SAACC,GAAD,OAAUC,EAASD,EAAKhC,OAAQgC,EAAK/B,MAAO+B,EAAK5B,eAElE,IAAM8B,EAAY7B,EAAW0B,KAAI,SAACI,GAAD,OAAO,yBACxC1C,GAAI0C,EAAElC,OACJ,kBAACmC,EAAD,CACF3C,GAAI0C,EAAElC,MACNA,MAAOkC,EAAElC,MACTC,YAAaiC,EAAEjC,YACfC,QAASgC,EAAEhC,cAIX,OACE,yBAAKX,UAAU,SACb,yBAAKC,GAAG,kBACR,yBAAKD,UAAU,UACb,yBAAKA,UAAU,iCACb0C,M,sjBClBV,IAAMG,EAAYC,IAAOC,IAAV,KAOTC,EAAOF,IAAOC,IAAV,KAMJE,EAAQH,IAAOC,IAAV,KAMLG,EAAUJ,IAAOC,IAAV,KA4BEnD,E,uKAhBX,OACE,kBAACiD,EAAD,KACE,kBAACK,EAAD,KACE,kBAACF,EAAD,KACE,kBAACG,EAAD,CACAtD,OJjCV,kGIoCQ,kBAACoD,EAAD,KACE,kBAACG,EAAD,a,GAXQC,a,MCzBLC,MANf,WACE,OACE,kBAACC,EAAD,OCMgBC,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SD0HpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAME,c","file":"static/js/main.2117d79d.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport Plyr from \"plyr\"\r\n\r\nconst Index = ({ srcUrl }) => {\r\n    useEffect(() =>{\r\n        new Plyr('#vdepa');\r\n    }) \r\n    return (\r\n        <div className=\"vdepa\">\r\n        <video\r\n            id=\"vdepa\"\r\n            playsInline\r\n            controls\r\n            className=\"media-player__Video-gqzi7w-5 kueHaM\"\r\n            autoPlay\r\n          >\r\n            <source\r\n              src={srcUrl}\r\n              type=\"video/mp4\"\r\n            />\r\n          </video>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n","const stripeMeta = (strpId, btnId, btnCategory, btnText, priceId) => ({\r\n  strpId,\r\n  btnId,\r\n  btnCategory,\r\n  btnText,\r\n  priceId\r\n});\r\n\r\nexport const VideoSrc =\r\n  \"https://res.cloudinary.com/dsdkssc5e/video/upload/v1593023516/Donation_video_copy_kzarti.mp4\";\r\n\r\nexport const stripeData = [\r\n  stripeMeta(\r\n    \"pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq\",\r\n    \"checkout-button-sku_HVDscuGwFYhCls\", \r\n  \"A\", \"$5 for 🤜🤛\",\r\n  \"sku_HVDscuGwFYhCls\",\r\n  ),\r\n  stripeMeta(\r\n    'pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq',\r\n    \"checkout-button-sku_HVDsxxbXRqfRA8\",\r\n    \"B\", \"$10 for ✊\",\r\n    'sku_HVDsxxbXRqfRA8',\r\n    ),\r\n  stripeMeta(\r\n    'pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq',\r\n    \"checkout-button-sku_HVDsgbFVuaRLJo\", \r\n    \"C\", \"$20 for 🙏\",\r\n    'sku_HVDsgbFVuaRLJo',\r\n    ),\r\n  stripeMeta(\r\n    'pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq',\r\n    \"checkout-button-sku_HVDsWxIrdcPaPD\", \r\n    \"D\", \"$50 for 👏\",\r\n    'sku_HVDsWxIrdcPaPD',\r\n    ),\r\n  stripeMeta(\r\n    'pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq',\r\n    \"checkout-button-sku_HVDs7rks2PPfFF\", \r\n    \"E\", \"$100 for 🙌\",\r\n    'sku_HVDs7rks2PPfFF',\r\n    ),\r\n  stripeMeta(\r\n    'pk_live_5GM16A7hC4non0p8vwxikBEy00ja0bU4Iq',\r\n    \"checkout-button-sku_HVKFOGMOPERMOlrmor\", \r\n    \"F\", \"Other amount\",\r\n    null,)\r\n];\r\n","import React from \"react\";\r\n\r\nconst Index = ({ btnId, btnCategory, btnText }) => {\r\n  return (\r\n    <button\r\n      data-qa=\"poll-option-0\"\r\n      className=\"poll__ItemButton-iptlde-0 fvmKtl\"\r\n      id={btnId}\r\n    >\r\n      <span className=\"poll__Letter-iptlde-1 fxXBlX\">{btnCategory}</span>\r\n      <span className=\"poll__Content-iptlde-3 jJameY\">{btnText}</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","import {loadStripe as Stripe} from '@stripe/stripe-js'\r\n\r\nconst runStripe = async (stripeId, divId, priceId) => {\r\n  const stripe = await Stripe(stripeId);\r\n  const checkoutButton = document.getElementById(divId);\r\n  checkoutButton.addEventListener(\"click\", () => {\r\n    stripe\r\n      .redirectToCheckout({\r\n        lineItems: [{ price: priceId, quantity: 1 }],\r\n        mode: \"payment\",\r\n        successUrl: `${window.location.protocol}//delovery.org/success`,\r\n        cancelUrl: `${window.location.protocol}//delovery.org/canceled`,\r\n      })\r\n      .then((result) => {\r\n        if (result.error) {\r\n          const displayError = document.getElementById(\"error-message\");\r\n          displayError.textContent = result.error.message;\r\n        }\r\n      });\r\n  });\r\n};\r\nexport default runStripe;\r\n","import React, { useEffect } from \"react\";\r\nimport { stripeData } from \"../../data\";\r\nimport StripeButton from \"../StripeButton\";\r\nimport StripeJs from '../../utils/StripeJs'\r\n\r\nconst Index = () => {\r\n  useEffect(() => {\r\n    stripeData.map((strp) => StripeJs(strp.strpId, strp.btnId, strp.priceId ))\r\n  })\r\n  const stripeDiv = stripeData.map((x) => <div\r\n  id={x.btnId}>\r\n    <StripeButton\r\n  id={x.btnId}\r\n  btnId={x.btnId}\r\n  btnCategory={x.btnCategory}\r\n  btnText={x.btnText}\r\n  />\r\n  </div>\r\n)\r\n  return (\r\n    <div className=\"ksdla\">\r\n      <div id=\"error-message\"></div>\r\n      <div className=\"dntbtn\">\r\n        <div className=\"poll__Wrapper-iptlde-5 dpBdeQ\">\r\n        { stripeDiv  }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport VideoPlayer from \"../../components/VideoPlayer\";\r\nimport StripePay from \"../../components/StripePay\";\r\nimport { VideoSrc } from '../../data'\r\n\r\nconst Container = styled.div`\r\n  // display: flex;\r\n  // flex-direction: row;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst Rect = styled.div`\r\n  width: 668px;\r\n  height: 768px;\r\n  background-color: #fff;\r\n`;\r\n\r\nconst Rect1 = styled.div`\r\n  width: 698px;\r\n  height: 768px;\r\n  background-color: #fff;\r\n`;\r\n\r\nconst RectRow = styled.div`\r\n  height: 768px;\r\n  flex-direction: row;\r\n  display: flex;\r\n  flex: 1 1 0%;\r\n`;\r\n\r\n\r\n// const srcUrl = \r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <Container >\r\n        <RectRow>\r\n          <Rect>\r\n            <VideoPlayer \r\n            srcUrl={VideoSrc}\r\n            />\r\n          </Rect>\r\n          <Rect1>\r\n            <StripePay/>\r\n          </Rect1>\r\n        </RectRow>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Index;\r\n","import React from 'react';\nimport DonationPage from './pages/DonationPage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <DonationPage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}